package com.valueclickbrands.solr.servlet;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.apache.commons.lang.time.DurationFormatUtils;
import org.apache.commons.lang.time.StopWatch;
import org.apache.log4j.Logger;
import org.apache.lucene.search.TermsFilter;
import org.apache.solr.client.solrj.impl.CloudSolrServer;

import com.thoughtworks.xstream.XStream;
import com.valueclickbrands.solr.model.Node;
import com.valueclickbrands.solr.model.Tag;
import com.valueclickbrands.solr.model.Taxonomy;
import com.valueclickbrands.solr.service.DumpService;
import com.valueclickbrands.solr.service.IndexService;
import com.valueclickbrands.solr.service.TaxonomyService;
import com.valueclickbrands.solr.util.Configure;

public class TestServlet extends HttpServlet {
	protected static Logger logger = Logger.getLogger(TestServlet.class);
	public static final String RETURN_FORMAT_TYPE_XML = "xml";
	public static final String RETURN_FORMAT_TYPE_JSON = "json";
	private DumpService dumpService;
	private IndexService indexService;
	private TaxonomyService taxonomyService;
	
	
	public void setTaxonomyService(TaxonomyService taxonomyService) {
		this.taxonomyService = taxonomyService;
	}


	public IndexService getIndexService() {
		return indexService;
	}


	public void setIndexService(IndexService indexService) {
		this.indexService = indexService;
	}



	private String siteID;
	
	
	public DumpService getDumpService() {
		return dumpService;
	}


	public void setDumpService(DumpService dumpService) {
		this.dumpService = dumpService;
	}


	public void setSiteID(String siteID) {
		this.siteID = siteID;
	}


	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		service(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		service(req, resp);
	}

	@Override
	protected void service(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		
		long starttime = System.currentTimeMillis();
		request.setCharacterEncoding("UTF-8");
		HashMap<String,Object> parameter = null;
		logger.info("Parameter--->"+parameter);
		String  defaultCollection = request.getParameter("collection")==null?"invDataSolr":request.getParameter("collection").trim();
		String  action = request.getParameter("action")==null?"":request.getParameter("action").trim();
		String  nid = request.getParameter("nid")==null?"0":request.getParameter("nid").trim();
		String  vid = request.getParameter("vid")==null?"0":request.getParameter("vid").trim();

//		int hasContent = 0;
//		if(parameter.containsKey(PARAMETER_NAME_CONTENT)){
//			hasContent = (Integer)parameter.get(PARAMETER_NAME_CONTENT);
//		}
		StopWatch watch = new StopWatch();
		watch.start();
//		boolean isPhrase = (Integer)parameter.get(PARAMETER_NAME_PHRASE)==1;
		String result = " success ";
		if(action.equals("1")){
			boolean count =  indexService.createIndexIncrementalForNode(Integer.valueOf(nid), Integer.valueOf(vid));
			if(!count){
				result = "failed";
			}
			logger.info("index success ,size:"+count);

		}else if(action.equals("2")){
			Map<String, Node> node_map = dumpService.dump();
			 if(node_map.size()>0){
				 String zkHost = "solrcloud002.la1.vcinv.net:2181,solrcloud001.la1.vcinv.net:2181,solrcloud003.la1.vcinv.net:2181";       
					CloudSolrServer cloudSolrServer = IndexService.getCloudSolrServer(zkHost, defaultCollection);         
					logger.info("The Cloud SolrServer Instance has benn created!");            
				 int count =  indexService.createIndexForNode(cloudSolrServer,node_map,true);
			 }

		}else if(action.equals("3")) {
			List<Taxonomy> list = taxonomyService.getTaxonomyList();
			CloudSolrServer cloudSolrServer = IndexService.getCloudSolrServer(Configure.ZookeeperHosts, defaultCollection); 
			int count =  indexService.createIndexForTaxonomy(cloudSolrServer, list, true);
			
		}

	
		 
		 /**
		response.setCharacterEncoding("UTF-8");
		response.setDateHeader("Expires", 0);
        response.addHeader("Pragma", "no-cache");  
        response.setHeader("Cache-Control", "no-cache");
        /**
        if(true){
        	response.setContentType("text/xml;charset=utf-8");
        }else{
        	response.setContentType("application/json;charset=utf-8");
        }
        **/
        
        try {
			response.getWriter().write(result);
			response.getWriter().flush(); 
		} catch (IOException e) {
			e.printStackTrace();
		}finally{
			response.getWriter().close();
		}
        
        logger.info("index exe time:"+(System.currentTimeMillis()-starttime));
	}
	
	

	public String getStringParameter(HttpServletRequest request,String name){
		return request.getParameter(name);
	}
	
	
	
}
